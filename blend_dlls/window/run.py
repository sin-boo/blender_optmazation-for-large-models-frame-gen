#!/usr/bin/env python3
"""
Screen Capture Application - Ultimate Self-Sufficient Launcher
This script can install Python and all dependencies automatically
"""

import os
import sys
import subprocess
import platform
import urllib.request
import zipfile
import json
import shutil
from pathlib import Path

class UltimateLauncher:
    def __init__(self):
        self.app_dir = Path(__file__).parent.absolute()
        self.tools_dir = self.app_dir / "tools"
        self.python_dir = self.tools_dir / "python"
        self.src_dir = self.app_dir / "src"
        
        # Create necessary directories
        self.tools_dir.mkdir(exist_ok=True)
        
        self.system = platform.system()
        self.is_64bit = platform.architecture()[0] == "64bit"
        
        # Python download info
        self.python_info = {
            "version": "3.11.9",
            "windows": {
                "64": "https://www.python.org/ftp/python/3.11.9/python-3.11.9-embed-amd64.zip",
                "32": "https://www.python.org/ftp/python/3.11.9/python-3.11.9-embed-win32.zip"
            }
        }
    
    def print_banner(self):
        """Print application banner"""
        banner = f\"\"\"\n╔══════════════════════════════════════════════════════════════════╗\n║                                                                  ║\n║  🖥️   SCREEN CAPTURE APPLICATION - SELF-SUFFICIENT EDITION      ║\n║                                                                  ║\n║  📱 Modern GUI • 🪟 Window Capture • 📺 Screen Capture          ║\n║  🌐 HTTP Streaming • 💾 Local Storage • ⚙️ Auto-Setup          ║\n║                                                                  ║\n║  System: {self.system:<10} | Python: {self.get_python_status():<20}           ║\n║                                                                  ║\n╚══════════════════════════════════════════════════════════════════╝\n\"\"\"\n        print(banner)\n    \n    def get_python_status(self):\n        \"\"\"Get current Python status\"\"\"\n        try:\n            return f\"{platform.python_version()}\"\n        except:\n            return \"Not Available\"\n    \n    def check_python(self):\n        \"\"\"Check if suitable Python is available\"\"\"\n        print(\"🔍 Checking Python installation...\")\n        \n        # Check current Python process\n        try:\n            if sys.version_info >= (3, 7):\n                print(f\"✅ Current Python {platform.python_version()} is suitable\")\n                return sys.executable\n        except:\n            pass\n        \n        # Check system Python commands\n        for cmd in [\"python\", \"python3\", \"py\"]:\n            try:\n                result = subprocess.run(\n                    [cmd, \"--version\"], \n                    capture_output=True, \n                    text=True, \n                    timeout=5\n                )\n                if result.returncode == 0:\n                    version_line = result.stdout.strip()\n                    if \"Python 3.\" in version_line:\n                        version = version_line.split()[1]\n                        major, minor = map(int, version.split('.')[:2])\n                        if major >= 3 and minor >= 7:\n                            print(f\"✅ Found system Python {version}: {cmd}\")\n                            return cmd\n            except:\n                continue\n        \n        # Check portable Python\n        portable_python = self.python_dir / \"python.exe\"\n        if portable_python.exists():\n            try:\n                result = subprocess.run(\n                    [str(portable_python), \"--version\"], \n                    capture_output=True, \n                    text=True, \n                    timeout=5\n                )\n                if result.returncode == 0:\n                    version = result.stdout.strip().split()[1]\n                    print(f\"✅ Found portable Python {version}\")\n                    return str(portable_python)\n            except:\n                pass\n        \n        print(\"❌ No suitable Python found\")\n        return None\n    \n    def download_with_progress(self, url, destination, description):\n        \"\"\"Download file with progress bar\"\"\"\n        print(f\"📥 Downloading {description}...\")\n        \n        class ProgressBar:\n            def __init__(self):\n                self.last_percent = 0\n            \n            def update(self, block_num, block_size, total_size):\n                if total_size > 0:\n                    downloaded = block_num * block_size\n                    percent = min(100, (downloaded * 100) // total_size)\n                    \n                    if percent != self.last_percent:\n                        bar_length = 30\n                        filled = (percent * bar_length) // 100\n                        bar = \"█\" * filled + \"░\" * (bar_length - filled)\n                        size_mb = total_size / (1024 * 1024)\n                        downloaded_mb = downloaded / (1024 * 1024)\n                        \n                        print(f\"\\r   [{bar}] {percent}% ({downloaded_mb:.1f}/{size_mb:.1f} MB)\", \n                              end=\"\", flush=True)\n                        self.last_percent = percent\n        \n        try:\n            progress = ProgressBar()\n            urllib.request.urlretrieve(url, destination, progress.update)\n            print()  # New line after progress\n            return True\n        except Exception as e:\n            print(f\"\\n❌ Download failed: {e}\")\n            return False\n    \n    def install_portable_python(self):\n        \"\"\"Install portable Python (Windows only)\"\"\"\n        if self.system != \"Windows\":\n            print(\"❌ Portable Python only available for Windows\")\n            print(\"📖 Please install Python 3.7+ from: https://python.org\")\n            return False\n        \n        print(\"🐍 Installing portable Python...\")\n        \n        # Determine download URL\n        arch = \"64\" if self.is_64bit else \"32\"\n        download_url = self.python_info[\"windows\"][arch]\n        \n        # Download Python\n        zip_file = self.tools_dir / \"python_portable.zip\"\n        if not self.download_with_progress(download_url, zip_file, \"Python Portable\"):\n            return False\n        \n        try:\n            # Extract Python\n            print(\"📦 Extracting Python...\")\n            with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n                zip_ref.extractall(self.python_dir)\n            \n            # Enable pip by modifying python311._pth (or similar)\n            pth_files = list(self.python_dir.glob(\"python*._pth\"))\n            if pth_files:\n                pth_file = pth_files[0]\n                with open(pth_file, 'a') as f:\n                    f.write(\"\\n# Enable site-packages for pip\\n\")\n                    f.write(\"../..\\n\")\n                    f.write(\"Lib/site-packages\\n\")\n            \n            # Download and install pip\n            get_pip_url = \"https://bootstrap.pypa.io/get-pip.py\"\n            get_pip_path = self.python_dir / \"get-pip.py\"\n            \n            if self.download_with_progress(get_pip_url, get_pip_path, \"pip installer\"):\n                python_exe = self.python_dir / \"python.exe\"\n                print(\"🔧 Installing pip...\")\n                subprocess.run(\n                    [str(python_exe), str(get_pip_path), \"--no-warn-script-location\"],\n                    check=True, capture_output=True\n                )\n                get_pip_path.unlink()  # Clean up\n            \n            # Clean up zip file\n            zip_file.unlink()\n            \n            print(\"✅ Portable Python installed successfully!\")\n            return str(python_exe)\n            \n        except Exception as e:\n            print(f\"❌ Failed to install portable Python: {e}\")\n            return False\n    \n    def install_dependencies(self, python_cmd):\n        \"\"\"Install Python dependencies\"\"\"\n        print(\"📦 Installing application dependencies...\")\n        \n        # Essential packages for the application\n        essential_packages = [\n            \"Pillow>=10.0.0\",\n            \"requests>=2.25.0\",\n            \"flask>=2.0.0\",\n            \"mss>=6.0.0\"\n        ]\n        \n        # Add Windows-specific packages\n        if self.system == \"Windows\":\n            essential_packages.append(\"pywin32>=300\")\n        \n        # Install packages\n        for package in essential_packages:\n            print(f\"   📦 Installing {package.split('>=')[0]}...\")\n            try:\n                result = subprocess.run(\n                    [python_cmd, \"-m\", \"pip\", \"install\", package, \"--quiet\"],\n                    capture_output=True,\n                    text=True,\n                    timeout=180\n                )\n                \n                if result.returncode == 0:\n                    print(f\"      ✅ {package.split('>=')[0]} installed\")\n                else:\n                    print(f\"      ❌ {package.split('>=')[0]} failed: {result.stderr.strip()}\")\n                    \n            except subprocess.TimeoutExpired:\n                print(f\"      ⏰ {package.split('>=')[0]} installation timed out\")\n            except Exception as e:\n                print(f\"      ❌ {package.split('>=')[0]} error: {e}\")\n        \n        print(\"✅ Dependency installation completed!\")\n        return True\n    \n    def create_startup_files(self):\n        \"\"\"Create convenient startup files\"\"\"\n        print(\"📝 Creating startup shortcuts...\")\n        \n        # Create Windows batch file\n        if self.system == \"Windows\":\n            batch_content = f'''@echo off\ncd /d \"{self.app_dir}\"\npython src\\main_app.py\nif %errorlevel% neq 0 pause\n'''\n            \n            with open(self.app_dir / \"Start_App.bat\", \"w\") as f:\n                f.write(batch_content)\n        \n        # Create cross-platform shell script\n        shell_content = f'''#!/bin/bash\ncd \"{self.app_dir}\"\npython3 src/main_app.py\n'''\n        \n        with open(self.app_dir / \"start_app.sh\", \"w\") as f:\n            f.write(shell_content)\n        \n        print(\"✅ Startup files created!\")\n    \n    def verify_installation(self, python_cmd):\n        \"\"\"Verify the installation is working\"\"\"\n        print(\"🔬 Verifying installation...\")\n        \n        # Test imports\n        test_script = '''\nimport sys\ntry:\n    import tkinter\n    print(\"✅ tkinter\")\nexcept ImportError:\n    print(\"❌ tkinter\")\n\ntry:\n    from PIL import Image\n    print(\"✅ Pillow\")\nexcept ImportError:\n    print(\"❌ Pillow\")\n\ntry:\n    import requests\n    print(\"✅ requests\")\nexcept ImportError:\n    print(\"❌ requests\")\n\ntry:\n    import flask\n    print(\"✅ flask\")\nexcept ImportError:\n    print(\"❌ flask\")\n\ntry:\n    import mss\n    print(\"✅ mss\")\nexcept ImportError:\n    print(\"❌ mss\")\n\nif sys.platform == \"win32\":\n    try:\n        import win32gui\n        print(\"✅ pywin32\")\n    except ImportError:\n        print(\"❌ pywin32\")\n'''\n        \n        try:\n            result = subprocess.run(\n                [python_cmd, \"-c\", test_script],\n                capture_output=True,\n                text=True,\n                timeout=10\n            )\n            \n            print(\"Package verification:\")\n            for line in result.stdout.strip().split('\\n'):\n                if line.strip():\n                    print(f\"   {line}\")\n            \n            return \"❌\" not in result.stdout\n            \n        except Exception as e:\n            print(f\"❌ Verification failed: {e}\")\n            return False\n    \n    def setup_complete_environment(self):\n        \"\"\"Set up the complete environment from scratch\"\"\"\n        print(\"🚀 Setting up complete environment...\")\n        \n        # Check/install Python\n        python_cmd = self.check_python()\n        \n        if not python_cmd:\n            if self.system == \"Windows\":\n                python_cmd = self.install_portable_python()\n                if not python_cmd:\n                    return None\n            else:\n                print(\"❌ Please install Python 3.7+ manually\")\n                print(\"🔗 Download from: https://www.python.org/downloads/\")\n                input(\"Press Enter after installing Python...\")\n                return None\n        \n        # Install dependencies\n        self.install_dependencies(python_cmd)\n        \n        # Create startup files\n        self.create_startup_files()\n        \n        # Verify everything works\n        if self.verify_installation(python_cmd):\n            print(\"\\n🎉 Environment setup completed successfully!\")\n        else:\n            print(\"\\n⚠️  Environment setup completed with some issues\")\n        \n        return python_cmd\n    \n    def launch_application(self, python_cmd):\n        \"\"\"Launch the main application\"\"\"\n        app_file = self.src_dir / \"main_app.py\"\n        \n        if not app_file.exists():\n            print(f\"❌ Application file not found: {app_file}\")\n            return False\n        \n        print(\"\\n🚀 Launching Screen Capture Application...\")\n        print(\"\" + \"─\" * 50)\n        \n        try:\n            # Set environment for the application\n            env = os.environ.copy()\n            env['PYTHONPATH'] = str(self.src_dir)\n            \n            # Launch application\n            subprocess.run([python_cmd, str(app_file)], env=env, check=True)\n            return True\n            \n        except subprocess.CalledProcessError as e:\n            print(f\"❌ Application exited with code {e.returncode}\")\n            return False\n        except KeyboardInterrupt:\n            print(\"\\n👋 Application closed by user\")\n            return True\n        except Exception as e:\n            print(f\"❌ Launch error: {e}\")\n            return False\n    \n    def show_interactive_menu(self):\n        \"\"\"Show interactive menu\"\"\"\n        while True:\n            print(\"\\n\" + \"╔\" + \"═\" * 48 + \"╗\")\n            print(\"║\" + \"           SCREEN CAPTURE APP MENU\".center(48) + \"║\")\n            print(\"╠\" + \"═\" * 48 + \"╣\")\n            print(\"║  1️⃣  Launch Application                     ║\")\n            print(\"║  2️⃣  Setup/Repair Environment               ║\")\n            print(\"║  3️⃣  Launch Server Only                     ║\")\n            print(\"║  4️⃣  System Information                     ║\")\n            print(\"║  5️⃣  Exit                                   ║\")\n            print(\"╚\" + \"═\" * 48 + \"╝\")\n            \n            try:\n                choice = input(\"\\n🎯 Select option (1-5): \").strip()\n                \n                if choice == \"1\":\n                    python_cmd = self.check_python()\n                    if python_cmd:\n                        if self.launch_application(python_cmd):\n                            break\n                    else:\n                        print(\"❌ Python not available. Try option 2 to setup environment.\")\n                        input(\"Press Enter to continue...\")\n                \n                elif choice == \"2\":\n                    python_cmd = self.setup_complete_environment()\n                    if python_cmd:\n                        print(\"\\n🎉 Setup completed! You can now launch the application.\")\n                    input(\"\\nPress Enter to continue...\")\n                \n                elif choice == \"3\":\n                    python_cmd = self.check_python()\n                    if python_cmd:\n                        server_file = self.src_dir / \"capture_server.py\"\n                        if server_file.exists():\n                            print(\"🌐 Launching server...\")\n                            subprocess.run([python_cmd, str(server_file)])\n                        else:\n                            print(\"❌ Server file not found\")\n                    else:\n                        print(\"❌ Python not available\")\n                    input(\"Press Enter to continue...\")\n                \n                elif choice == \"4\":\n                    self.show_system_info()\n                    input(\"Press Enter to continue...\")\n                \n                elif choice == \"5\":\n                    print(\"👋 Goodbye!\")\n                    break\n                \n                else:\n                    print(\"❌ Invalid choice. Please enter 1-5.\")\n                    \n            except (KeyboardInterrupt, EOFError):\n                print(\"\\n👋 Goodbye!\")\n                break\n    \n    def show_system_info(self):\n        \"\"\"Show system information\"\"\"\n        print(\"\\n\" + \"═\" * 50)\n        print(\"🖥️  SYSTEM INFORMATION\")\n        print(\"═\" * 50)\n        print(f\"Operating System: {platform.platform()}\")\n        print(f\"Python Version: {self.get_python_status()}\")\n        print(f\"Architecture: {platform.architecture()[0]}\")\n        print(f\"Processor: {platform.processor()}\")\n        print(f\"Application Directory: {self.app_dir}\")\n        print(f\"Tools Directory: {self.tools_dir}\")\n        print(f\"Portable Python: {'✅ Available' if (self.python_dir / 'python.exe').exists() else '❌ Not installed'}\")\n        \n        # Check key file existence\n        print(\"\\n📁 Application Files:\")\n        key_files = [\n            (\"main_app.py\", self.src_dir / \"main_app.py\"),\n            (\"modern_gui.py\", self.src_dir / \"modern_gui.py\"),\n            (\"capture_server.py\", self.src_dir / \"capture_server.py\"),\n            (\"requirements.txt\", self.app_dir / \"requirements.txt\")\n        ]\n        \n        for name, path in key_files:\n            status = \"✅\" if path.exists() else \"❌\"\n            print(f\"   {status} {name}\")\n    \n    def run(self):\n        \"\"\"Main run method\"\"\"\n        self.print_banner()\n        \n        # Quick check - if Python is available and app exists, try direct launch\n        python_cmd = self.check_python()\n        app_file = self.src_dir / \"main_app.py\"\n        \n        if python_cmd and app_file.exists():\n            print(\"\\n⚡ Quick launch available!\")\n            response = input(\"🚀 Launch application now? (Y/n): \").strip().lower()\n            \n            if response in ('', 'y', 'yes'):\n                if self.launch_application(python_cmd):\n                    return True\n                else:\n                    print(\"\\n⚠️  Launch failed, showing menu for troubleshooting...\")\n        \n        # Show interactive menu\n        self.show_interactive_menu()\n        return True

def main():\n    \"\"\"Main entry point\"\"\"\n    try:\n        launcher = UltimateLauncher()\n        launcher.run()\n    except KeyboardInterrupt:\n        print(\"\\n👋 Interrupted by user\")\n    except Exception as e:\n        print(f\"\\n❌ Unexpected error: {e}\")\n        input(\"Press Enter to exit...\")\n\nif __name__ == \"__main__\":\n    main()
